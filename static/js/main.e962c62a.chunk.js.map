{"version":3,"sources":["lib/api/lists.js","lib/api/conversion.js","lib/api/copypaste.js","demo/components/SentryBoundary.js","demo/components/Highlight.js","demo/components/Link.js","demo/components/Image.js","demo/components/Snippet.js","demo/utils/DraftUtils.js","demo/components/DemoEditor.js","demo/components/App.js","index.js"],"names":["DRAFT_DEFAULT_DEPTH_CLASS","COUNTER_STYLES","generateListNestingStyles","selectorPrefix","minDepth","maxDepth","counterStyles","styles","length","depth","d","String","prefix","counter","counterStyle","m","blockDepthStyleFn","block","getDepth","createEditorStateFromRaw","rawContentState","decorator","editorState","contentState","convertFromRaw","EditorState","createWithContent","createEmpty","serialiseEditorStateToRaw","getCurrentContent","convertToRaw","blocks","every","text","trim","entityRanges","inlineStyleRanges","FRAGMENT_ATTR","DRAFT_DECORATOR","draftEditorCopyCutListener","ref","e","selection","window","getSelection","clipboardData","rangeCount","anchorNode","focusNode","anchor","Element","parentElement","focus","anchorDecorator","closest","focusDecorator","contains","isSelectionInDecorator","fragment","editorRoot","selectionState","getDraftEditorSelection","getContentStateFragment","getText","getSelectedContent","_latestEditorState","editor","content","ContentState","createFromBlockArray","toArray","serialisedContent","JSON","stringify","fragmentElt","document","createElement","appendChild","getRangeAt","cloneContents","setAttribute","setData","toString","outerHTML","preventDefault","onDraftEditorCopy","editOnCopy","onDraftEditorCut","editOnCut","handleDraftEditorPastedText","html","pastedContent","DOMParser","parseFromString","querySelector","rawContent","fragmentAttr","getAttribute","parse","error","getDraftEditorPastedContent","getBlockMap","Modifier","replaceWithFragment","push","SentryBoundary","props","state","errorInfo","isRavenAvailable","Raven","this","setState","captureException","extra","children","className","type","onClick","lastEventId","showReportDialog","href","target","rel","style","textDecoration","location","reload","Component","onCopy","value","hidden","body","select","execCommand","removeChild","Highlight","position","bind","right","linkStrategy","contentBlock","callback","findEntityRanges","character","entityKey","getEntity","getType","Link","entity","title","getData","url","Image","getEntityAt","src","alt","width","Snippet","contentEditable","DraftUtils","addLineBreak","isCollapsed","RichUtils","insertSoftNewline","newContent","removeRange","getSelectionAfter","getBlockForKey","getStartKey","insertText","getInlineStyleAt","getStartOffset","BLOCKS","BLOCKS_EXTENDED","STYLES","BOLD","ITALIC","STYLES_EXTENDED","CODE","STRIKETHROUGH","UNDERLINE","ENTITIES","label","attributes","whitelist","listNestingStyles","DRAFT_DEFAULT_MAX_DEPTH","getListNestingStyles","DemoEditor","CompositeDecorator","strategy","component","readOnly","onChange","keyBindingFn","addBR","toggleReadOnly","toggleStyle","toggleBlock","toggleEntity","blockRenderer","handlePastedText","nextState","toggleInlineStyle","toggleBlockType","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","toggleLink","editable","newState","event","keyCode","onTab","getDefaultKeyBinding","extended","Object","keys","map","onMouseDown","stripPastedStyles","blockRendererFn","blockStyleFn","onCut","defaultProps","copyPasteContent","key","offset","entityMap","mutability","data","listNestingContent","App","mount","getElementById","ReactDOM","render"],"mappings":"oWAOaA,EAA4B,iCAMnCC,EAAiB,CAAC,UAAW,cAAe,eAUrCC,EAA4B,SACvCC,EACAC,EACAC,EACAC,GAcA,IAZA,IAAIC,EAAM,aACTJ,EADS,sFAERG,EAAc,EAAIA,EAAcE,QAFxB,qBAITL,EAJS,sFAKRG,EAAc,EAAIA,EAAcE,QALxB,qBAOTL,EAPS,sFAQRG,EAAc,EAAIA,EAAcE,QARxB,aAYDC,EAAQL,EAAUK,GAASJ,EAAUI,IAAS,CACrD,IAAMC,EAAIC,OAAOF,GACXG,EAAM,UAAMT,GAAN,OAAuBO,GAC7BG,EAAO,YAAQH,GACfI,EAAeR,EAAcG,EAAQH,EAAcE,QAEnDO,EAAIJ,OADK,KAAOF,EAAQ,IAG9BF,GAAM,aACPK,EADO,4DACmDG,EADnD,mBAEPH,EAFO,6DAEoDG,EAFpD,mBAGPH,EAHO,gFAGuEC,EAHvE,aAGmFC,EAHnF,sCAG6HD,EAH7H,iBAIPD,EAJO,4DAImDC,EAJnD,OAOR,OAAON,GA0BIS,EAAoB,SAACC,GAChC,IAAMR,EAAQQ,EAAMC,WACpB,OAAOT,EAhF8B,EAgF9B,UACAT,GADA,OAC4BW,OAAOF,IACtC,IC3EOU,EAA2B,SACtCC,EACAC,GAEA,IAAIC,EAEJ,GAAIF,EAAiB,CACnB,IAAMG,EAAeC,yBAAeJ,GACpCE,EAAcG,cAAYC,kBAAkBH,EAAcF,QAE1DC,EAAcG,cAAYE,YAAYN,GAGxC,OAAOC,GAOIM,EAA4B,SAACN,GACxC,IAAMC,EAAeD,EAAYO,oBAC3BT,EAAkBU,uBAAaP,GAUrC,OARgBH,EAAgBW,OAAOC,OAAM,SAACf,GAK5C,OAH+B,IAA7BA,EAAMgB,KAAKC,OAAO1B,UAChBS,EAAMkB,cAA8C,IAA9BlB,EAAMkB,aAAa3B,WACzCS,EAAMmB,mBAAwD,IAAnCnB,EAAMmB,kBAAkB5B,WAlC/B,KAsCaY,G,oECzBnCiB,EAAgB,kCAEhBC,EAAkB,mDAoDlBC,EAA6B,SACjCC,EACAC,GAEA,IAAMC,EAAYC,OAAOC,eAKzB,GACGH,EAAEI,eACsB,IAAzBH,EAAUI,aA3DiB,SAACJ,GAC9B,IAAQK,EAA0BL,EAA1BK,WAAYC,EAAcN,EAAdM,UACpB,IAAKD,IAAeC,EAClB,OAAO,EAGT,IAAMC,EACJF,aAAsBG,QAAUH,EAAaA,EAAWI,cACpDC,EACJJ,aAAqBE,QAAUF,EAAYA,EAAUG,cAEjDE,EAAkBJ,GAAUA,EAAOK,QAAQhB,GAC3CiB,EAAiBH,GAASA,EAAME,QAAQhB,GAE9C,OACEe,GACAE,IACCF,EAAgBG,SAASD,IACxBA,EAAeC,SAASH,IA0C1BI,CAAuBf,GAHzB,CAQA,IAAMgB,EA1CmB,SACzBpC,EACAqC,GAEA,IAAQC,EAAmBC,IAAwBvC,EAAaqC,GAAxDC,eAEFF,EAAWI,IACfxC,EAAYO,oBACZ+B,GAUF,OAJgBF,EAAS1B,OAAM,SAACf,GAC9B,OAAkC,IAA3BA,EAAM8C,UAAUvD,UAGR,KAAOkD,EAwBPM,CAAmBxB,EAAIyB,mBAAoBzB,EAAI0B,QAGhE,GAAIR,EAAU,CACZ,IAAMS,EAAUC,eAAaC,qBAAqBX,EAASY,WACrDC,EAAoBC,KAAKC,UAAU3C,uBAAaqC,IAIhDO,EAAcC,SAASC,cAAc,OAE3CF,EAAYG,YAAYnC,EAAUoC,WAAW,GAAGC,iBAChDL,EAAYM,aAAa3C,EAAekC,GAIxCG,EAAYM,aAAa,QAAS,0BAElCvC,EAAEI,cAAcoC,QAAQ,aAAcvC,EAAUwC,YAChDzC,EAAEI,cAAcoC,QAAQ,YAAaP,EAAYS,WAEjD1C,EAAE2C,oBAIOC,EAAoB,SAC/BnB,EACAzB,GAEAF,EAA2B2B,EAAQzB,GACnC6C,IAAWpB,EAAQzB,IAGR8C,EAAmB,SAC9BrB,EACAzB,GAEAF,EAA2B2B,EAAQzB,GACnC+C,IAAUtB,EAAQzB,IA2DPgD,EAA8B,SACzCC,EACApE,GAEA,IAAMqE,EAtCmC,SAACD,GAE1C,GAAa,KAATA,GAA+B,qBAATA,GAAiC,OAATA,EAChD,OAAO,KAGT,IACMhB,GADM,IAAIkB,WAAYC,gBAAgBH,EAAM,aAC1BI,cAAJ,WAAsBzD,EAAtB,MAGpB,GAAIqC,EAAa,CACf,IACIqB,EADEC,EAAetB,EAAYuB,aAAa5D,GAG9C,IAIE0D,EAAavB,KAAK0B,MAAMF,GACxB,MAAOG,GACP,OAAO,KAGT,OAAO3E,yBAAeuE,GAGxB,OAAO,KAYeK,CAA4BV,GAElD,GAAIC,EAAe,CACjB,IAAMjC,EAAWiC,EAAcU,cAEzBlC,EAAUmC,WAASC,oBACvBjF,EAAYO,oBACZP,EAAYsB,eACZc,GAEF,OAAOjC,cAAY+E,KAAKlF,EAAa6C,EAAS,mBAGhD,OAAO,G,OCvHMsC,E,kDAvEb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,CAAER,MAAO,MAFE,E,qDAK1B,SAAkBA,EAAcS,GAC9B,IAAMC,IAAqBlE,OAAOmE,MAClCC,KAAKC,SAAS,CAAEb,UAEZU,GACFlE,OAAOmE,MAAMG,iBAAiBd,EAAO,CAAEe,MAAON,M,oBAIlD,WACE,IAAQO,EAAaJ,KAAKL,MAAlBS,SACAhB,EAAUY,KAAKJ,MAAfR,MACFU,IAAqBlE,OAAOmE,MAElC,OAAOX,EACL,qBAAKiB,UAAU,mBAAf,SACE,qBAAKA,UAAU,8BAAf,SACE,qBAAKA,UAAU,6BAAf,SAEE,sBAAKA,UAAU,gBAAf,UACE,+DACA,qHAIA,gCACGP,EACC,wBACEQ,KAAK,SACLC,QAAS,kBACP3E,OAAOmE,MAAMS,eACb5E,OAAOmE,MAAMU,oBAJjB,6BAUA,mBACEC,KAAK,2DACLC,OAAO,SACPC,IAAI,sBACJC,MAAO,CACLC,eAAgB,aALpB,iCAWF,wCACA,wBACER,KAAK,SACLC,QAAS,kBAAM3E,OAAOmF,SAASC,QAAO,IAFxC,yCAYVZ,M,GAnEuBa,aCTvBC,EAAS,SAACC,GACd,IAAMC,EAASxD,SAASC,cAAc,YACtCuD,EAAOD,MAAQA,EAGfvD,SAASyD,KAAKvD,YAAYsD,GAC1BA,EAAOE,SACP1D,SAAS2D,YAAY,QAErB3D,SAASyD,KAAKG,YAAYJ,IAebK,EAZG,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAH,OAChB,sBAAKN,MAAO,CAAEa,SAAU,YAAxB,UACE,wBACEnB,QAASW,EAAOS,KAAK,KAAMR,GAC3BN,MAAO,CAAEa,SAAU,WAAYE,MAAO,QAFxC,kBAMA,+BAAOT,QCXEU,EAAe,SAC1BC,EACAC,EACAvH,GAEAsH,EAAaE,kBAAiB,SAACC,GAC7B,IAAMC,EAAYD,EAAUE,YAC5B,OACgB,OAAdD,GACgD,SAAhD1H,EAAa2H,UAAUD,GAAWE,YAEnCL,IAYUM,EATF,SAAC,GAAkD,IAAhD7H,EAA+C,EAA/CA,aAAc0H,EAAiC,EAAjCA,UAAW9B,EAAsB,EAAtBA,SACjCkC,EAAS9H,EAAa2H,UAAUD,GACtC,OACE,sBAAM7B,UAAU,OAAOkC,MAAOD,EAAOE,UAAUC,IAA/C,SACGrC,KCNQsC,EApBD,SAAC,GAMR,IALLxI,EAKI,EALJA,MACAM,EAII,EAJJA,aAKM0H,EAAYhI,EAAMyI,YAAY,GAC9BC,EAAMV,EACR1H,EAAa2H,UAAUD,GAAWM,UAAUI,IAC5C,OAEJ,OACE,gCACE,uCACA,qBAAKA,IAAKA,EAAKC,IAAI,GAAGC,MAAM,YCQnBC,G,OArBC,SAAC,GAMV,IALL7I,EAKI,EALJA,MACAM,EAII,EAJJA,aAKM0H,EAAYhI,EAAMyI,YAAY,GAC9BzH,EAAOgH,EACT1H,EAAa2H,UAAUD,GAAWM,UAAUtH,KAC5C,cACJ,OACE,sBAAKmF,UAAU,UAAU2C,iBAAiB,EAA1C,qCAEE,qBAAK3C,UAAU,gBAAgB2C,iBAAiB,EAAhD,SACG9H,SCOM+H,EAJI,CACjBC,aAtBmB,SAAC3I,GACpB,IAAM6C,EAAU7C,EAAYO,oBACtBa,EAAYpB,EAAYsB,eAE9B,GAAIF,EAAUwH,cACZ,OAAOC,YAAUC,kBAAkB9I,GAGrC,IAAI+I,EAAa/D,WAASgE,YAAYnG,EAASzB,EAAW,WACpDgB,EAAW2G,EAAWE,oBACtBtJ,EAAQoJ,EAAWG,eAAe9G,EAAS+G,eAQjD,OAPAJ,EAAa/D,WAASoE,WACpBL,EACA3G,EACA,KACAzC,EAAM0J,iBAAiBjH,EAASkH,kBAChC,MAEKnJ,cAAY+E,KAAKlF,EAAa+I,EAAY,qBCa7CQ,G,OAAS,CACb,SAAY,IACZ,sBAAuB,KACvB,oBAAqB,KACrB,aAAc,KACd,aAAc,KACd,eAAgB,KAChB,aAAc,QAGVC,EAAkB,CACtB,SAAY,IACZ,sBAAuB,KACvB,oBAAqB,KACrB,aAAc,KACd,aAAc,KACd,eAAgB,KAChB,cAAe,KACf,cAAe,KACf,aAAc,KACd,WAAc,SACd,aAAc,OAGVC,EAAS,CACbC,KAAM,IACNC,OAAQ,KAGJC,EAAkB,CACtBF,KAAM,IACNC,OAAQ,IACRE,KAAM,IACNC,cAAe,IACfC,UAAW,KAGPC,EAAW,CACf,CACEjE,KAAM,OACNkE,MAAO,eACPC,WAAY,CAAC,OACbC,UAAW,CACThE,KAAM,+BAGV,CACEJ,KAAM,QACNkE,MAAO,eACPC,WAAY,CAAC,OACbC,UAAW,CACT9B,IAAK,UAGT,CACEtC,KAAM,UACNkE,MAAO,eACPC,WAAY,CAAC,QACbC,UAAW,IAEb,CACEpE,KAAM,kBACNkE,MAAO,KACPC,WAAY,GACZC,UAAW,KAMTC,EACJ,gCT1CkC,SAClCrL,GAII,IAHJD,EAGG,uDAHgBuL,EACnBxL,EAEG,uDAFsBH,EACzBM,EACG,uDADuBL,EAE1B,OAAOC,EACLC,EACAC,EACAC,EACAC,GSgCMsL,CAHe,MAmBnBC,E,kDAKJ,WAAYnF,GAAe,IAAD,sBACxB,cAAMA,GACN,IAAQtF,EAAoBsF,EAApBtF,gBAEFC,EAAY,IAAIyK,qBAAmB,CACvC,CACEC,SAAUnD,EACVoD,UAAW5C,KAPS,OAWxB,EAAKzC,MAAQ,CAEXrF,YAAaH,EAAyBC,EAAiBC,GACvD4K,UAAU,GAGZ,EAAKC,SAAW,EAAKA,SAASxD,KAAd,gBAChB,EAAKyD,aAAe,EAAKA,aAAazD,KAAlB,gBACpB,EAAK0D,MAAQ,EAAKA,MAAM1D,KAAX,gBACb,EAAK2D,eAAiB,EAAKA,eAAe3D,KAApB,gBACtB,EAAK4D,YAAc,EAAKA,YAAY5D,KAAjB,gBACnB,EAAK6D,YAAc,EAAKA,YAAY7D,KAAjB,gBACnB,EAAK8D,aAAe,EAAKA,aAAa9D,KAAlB,gBACpB,EAAK+D,cAAgB,EAAKA,cAAc/D,KAAnB,gBACrB,EAAKgE,iBAAmB,EAAKA,iBAAiBhE,KAAtB,gBAzBA,E,4CA6B1B,SAASiE,GACP5F,KAAKC,SAAS,CAAE1F,YAAaqL,M,yBAI/B,SAAYtF,EAAc5E,GACxB,IAAQnB,EAAgByF,KAAKJ,MAArBrF,YACRyF,KAAKmF,SAAS/B,YAAUyC,kBAAkBtL,EAAa+F,IAEvD5E,EAAE2C,mB,yBAIJ,SAAYiC,EAAsB5E,GAChC,IAAQnB,EAAgByF,KAAKJ,MAArBrF,YACRyF,KAAKmF,SAAS/B,YAAU0C,gBAAgBvL,EAAa+F,IAErD5E,EAAE2C,mB,0BAIJ,SAAaiC,GACX,IAAQ/F,EAAgByF,KAAKJ,MAArBrF,YACJ6C,EAAU7C,EAAYO,oBAE1B,GAAa,UAATwF,EAAkB,CAIpB,IAAM4B,GAHN9E,EAAUA,EAAQ2I,aAAazF,EAAM,YAAa,CAChDsC,IAAK,6EAEmBoD,0BAC1BhG,KAAKmF,SACHc,mBAAiBC,kBAAkB3L,EAAa2H,EAAW,WAExD,GAAa,YAAT5B,EAAoB,CAK7B,IAAM4B,GAHN9E,EAAUA,EAAQ2I,aAAazF,EAAM,YAAa,CAChDpF,KAAM,sCAEkB8K,0BAC1BhG,KAAKmF,SACHc,mBAAiBC,kBAAkB3L,EAAa2H,EAAW,WAExD,GAAa,oBAAT5B,EAA4B,CAGrC,IAAM4B,GADN9E,EAAUA,EAAQ2I,aAAazF,EAAM,YAAa,KACxB0F,0BAC1BhG,KAAKmF,SACHc,mBAAiBC,kBAAkB3L,EAAa2H,EAAW,UAExD,CAIL,IAAMA,GAHN9E,EAAUA,EAAQ2I,aAAazF,EAAM,UAAW,CAC9CmC,IAAK,6BAEmBuD,0BACpBrK,EAAYpB,EAAYsB,eAC9BmE,KAAKmF,SAAS/B,YAAU+C,WAAW5L,EAAaoB,EAAWuG,O,2BAK/D,SAAchI,GACZ,IACMkD,EADkB4C,KAAKJ,MAArBrF,YACoBO,oBAE5B,GAAwB,WAApBZ,EAAMkI,UACR,OAAO,KAGT,IAAMF,EAAYhI,EAAMyI,YAAY,GAEpC,IAAKT,EACH,MAAO,CACLkE,UAAU,GAId,IAAM9D,EAASlF,EAAQ+E,UAAUD,GAEjC,MAAyB,oBAArBI,EAAOF,UACF,CACL6C,UAAW,kBAAM,wBACjBmB,UAAU,GAIW,YAArB9D,EAAOF,UACF,CACL6C,UAAWlC,EACXqD,UAAU,GAIP,CACLnB,UAAWvC,EACX0D,UAAU,K,8BAKd,SAAiBlL,EAAcyD,EAAepE,GAC5C,IAAI8L,EAAW3H,EAA4BC,EAAMpE,GAEjD,QAAI8L,IACFrG,KAAKmF,SAASkB,IACP,K,0BAOX,SAAaC,GAEX,GADY,IACJA,EAAMC,QACZ,CACE,IAAQhM,EAAgByF,KAAKJ,MAArBrF,YACF8L,EAAWjD,YAAUoD,MAAMF,EAAO/L,EAzKvB,IA2KjB,OADAyF,KAAKmF,SAASkB,GACP,KAGP,OAAOI,+BAAqBH,K,mBAMlC,SAAM5K,GACJ,IAAQnB,EAAgByF,KAAKJ,MAArBrF,YACRyF,KAAKmF,SAASlC,EAAWC,aAAa3I,IAEtCmB,EAAE2C,mB,4BAIJ,SAAe3C,GACbsE,KAAKC,UAAS,kBAA0B,CAAEiF,UAA5B,EAAGA,aAEjBxJ,EAAE2C,mB,oBAGJ,WAAU,IAAD,OACCqI,EAAa1G,KAAKL,MAAlB+G,SACR,EAAkC1G,KAAKJ,MAA/BrF,EAAR,EAAQA,YAAa2K,EAArB,EAAqBA,SACf1L,EAASkN,EAAWvC,EAAkBH,EACtChJ,EAAS0L,EAAW3C,EAAkBD,EAE5C,OACE,sBAAKzD,UAAU,aAAf,UACE,eAAC,EAAD,WACE,sBAAKA,UAAU,gBAAf,UACGsG,OAAOC,KAAKpN,GAAQqN,KAAI,SAACvG,GAAD,OACvB,wBAEEwG,YAAa,EAAKvB,YAAY5D,KAAK,EAAMrB,GAF3C,SAIG6D,EAAgB7D,IAHZA,MAMRqG,OAAOC,KAAK5L,GAAQ6L,KAAI,SAACvG,GAAD,OACvB,wBAEEwG,YAAa,EAAKtB,YAAY7D,KAAK,EAAMrB,GAF3C,SAIGyD,EAAgBzD,IAHZA,MAMRiE,EAASsC,KAAI,SAACvG,GAAD,OACZ,wBAEEwG,YAAa,EAAKrB,aAAa9D,KAAK,EAAMrB,EAAKA,MAFjD,SAIGA,EAAKkE,OAHDlE,EAAKA,SAMd,wBAAQwG,YAAa9G,KAAKqF,MAA1B,gBACA,wBAAQyB,YAAa9G,KAAKsF,eAA1B,SACGJ,EAAW,eAAO,oBAGvB,cAAC,SAAD,CACE3K,YAAaA,EACb2K,SAAUA,EACVC,SAAUnF,KAAKmF,SACf4B,mBAAmB,EACnBC,gBAAiBhH,KAAK0F,cACtBuB,aAAchN,EACdmL,aAAcpF,KAAKoF,aACnBlE,OAAQ5C,EACR4I,MAAO1I,EACPmH,iBAAkB3F,KAAK2F,sBAG1BhB,EACD,oCACE,kCACE,sBAAMtE,UAAU,OAAhB,qBAEF,cAAC,EAAD,CACEc,MAAO1D,KAAKC,UACV7C,EAA0BN,GAC1B,KACA,e,GA5OW0G,aAAnB6D,EACGqC,aAAe,CACpB9M,gBAAiB,MAmPNyK,QCxWTsC,EAAmB,CACvBpM,OAAQ,CACN,CACEqM,IAAK,QACLnM,KAAM,oBACNoF,KAAM,cAER,CACE+G,IAAK,QACLnM,KAAM,IACNoF,KAAM,SACNlF,aAAc,CACZ,CACEkM,OAAQ,EACR7N,OAAQ,EACR4N,IAAK,KAIX,CACEA,IAAK,QACLnM,KAAM,GACNoF,KAAM,YAER,CACE+G,IAAK,QACLnM,KAAM,YACNoF,KAAM,gBAER,CACE+G,IAAK,QACLnM,KAAM,uBACNoF,KAAM,qBAER,CACE+G,IAAK,QACLnM,KAAM,IACNoF,KAAM,SACNlF,aAAc,CACZ,CACEkM,OAAQ,EACR7N,OAAQ,EACR4N,IAAK,KAIX,CACEA,IAAK,QACLnM,KAAM,gBACNoF,KAAM,sBAGViH,UAAW,CAET,EAAK,CACHjH,KAAM,kBACNkH,WAAY,YACZC,KAAM,IAGR,EAAK,CACHnH,KAAM,UACNkH,WAAY,YACZC,KAAM,CACJvM,KAAM,uCAMRwM,EAAqB,CACzB1M,OAAQ,CACN,CACEqM,IAAK,QACLnM,KAAM,WACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,SACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,OACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,UACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,SACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,OACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,MACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,KACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,OACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,SACNoF,KAAM,oBACN5G,MAAO,GAET,CACE2N,IAAK,QACLnM,KAAM,KACNoF,KAAM,oBACN5G,MAAO,IAET,CACE2N,IAAK,QACLnM,KAAM,aACNoF,KAAM,oBACN5G,MAAO,IAET,CACE2N,IAAK,QACLnM,KAAM,OACNoF,KAAM,oBACN5G,MAAO,IAET,CACE2N,IAAK,QACLnM,KAAM,KACNoF,KAAM,oBACN5G,MAAO,IAET,CACE2N,IAAK,QACLnM,KAAM,KACNoF,KAAM,oBACN5G,MAAO,IAET,CACE2N,IAAK,QACLnM,KAAM,MACNoF,KAAM,oBACN5G,MAAO,KAGX6N,UAAW,IAGPI,E,4JACJ,WACE,OACE,sBAAKtH,UAAU,MAAf,UACE,uEACA,oRAMA,cAAC,EAAD,CAAYqG,UAAU,EAAMrM,gBAAiB+M,IAC7C,cAAC,EAAD,CAAYV,UAAU,IACtB,uDACA,iPAMA,cAAC,EAAD,CAAYA,UAAU,EAAOrM,gBAAiBqN,W,GApBpCzG,aA0BH0G,IC1LTC,EAAQhK,SAASiK,eAAe,QAElCD,GACFE,IAASC,OAAO,cAAC,EAAD,IAASH,I","file":"static/js/main.e962c62a.chunk.js","sourcesContent":["// @flow\nimport type { BlockNode } from \"draft-js/lib/BlockNode\";\n\n// Default maximum block depth supported by Draft.js CSS.\nexport const DRAFT_DEFAULT_MAX_DEPTH = 4;\n\n// Default depth class prefix from Draft.js CSS.\nexport const DRAFT_DEFAULT_DEPTH_CLASS = \"public-DraftStyleDefault-depth\";\n\n/**\n * Matching the counter styles of Google Docs and Draft.js v0.11.\n * See https://github.com/facebook/draft-js/commit/d2a3ae8.\n */\nconst COUNTER_STYLES = [\"decimal\", \"lower-alpha\", \"lower-roman\"];\n\n/**\n * Generates CSS styles for list items, for a given selector pattern.\n * @deprecated Use getListNestingStyles instead, which has the same signature.\n * @param {string} selectorPrefix\n * @param {number} minDepth\n * @param {number} maxDepth\n * @param {Array} counterStyles\n */\nexport const generateListNestingStyles = (\n  selectorPrefix: string,\n  minDepth: number,\n  maxDepth: number,\n  counterStyles: string[],\n) => {\n  let styles = `\n.${selectorPrefix}1.public-DraftStyleDefault-orderedListItem::before { content: counter(ol1, ${\n    counterStyles[1 % counterStyles.length]\n  }) \". \"}\n.${selectorPrefix}2.public-DraftStyleDefault-orderedListItem::before { content: counter(ol2, ${\n    counterStyles[2 % counterStyles.length]\n  }) \". \"}\n.${selectorPrefix}4.public-DraftStyleDefault-orderedListItem::before { content: counter(ol4, ${\n    counterStyles[4 % counterStyles.length]\n  }) \". \"}\n`;\n\n  for (let depth = minDepth; depth <= maxDepth; depth++) {\n    const d = String(depth);\n    const prefix = `${selectorPrefix}${d}`;\n    const counter = `ol${d}`;\n    const counterStyle = counterStyles[depth % counterStyles.length];\n    const margin = 1.5 * (depth + 1);\n    const m = String(margin);\n\n    styles += `\n.${prefix}.public-DraftStyleDefault-listLTR { margin-left: ${m}em; }\n.${prefix}.public-DraftStyleDefault-listRTL { margin-right: ${m}em; }\n.${prefix}.public-DraftStyleDefault-orderedListItem::before { content: counter(${counter}, ${counterStyle}) '. '; counter-increment: ${counter}; }\n.${prefix}.public-DraftStyleDefault-reset { counter-reset: ${counter}; }`;\n  }\n\n  return styles;\n};\n\n/**\n * Dynamically generates the right list nesting styles.\n * Can be wrapped as a pure component - to re-render only when `max` changes (eg. never).\n */\nexport const getListNestingStyles = (\n  maxDepth: number,\n  minDepth: number = DRAFT_DEFAULT_MAX_DEPTH + 1,\n  selectorPrefix: string = DRAFT_DEFAULT_DEPTH_CLASS,\n  counterStyles: string[] = COUNTER_STYLES,\n) => {\n  return generateListNestingStyles(\n    selectorPrefix,\n    minDepth,\n    maxDepth,\n    counterStyles,\n  );\n};\n\n/**\n * Add depth classes that Draft.js doesn't provide.\n * See https://github.com/facebook/draft-js/blob/232791a4e92d94a52c869f853f9869367bdabdac/src/component/contents/DraftEditorContents-core.react.js#L58-L62.\n * @param {ContentBlock} block\n */\nexport const blockDepthStyleFn = (block: BlockNode) => {\n  const depth = block.getDepth();\n  return depth > DRAFT_DEFAULT_MAX_DEPTH\n    ? `${DRAFT_DEFAULT_DEPTH_CLASS}${String(depth)}`\n    : \"\";\n};\n","// @flow\nimport { EditorState, convertFromRaw, convertToRaw } from \"draft-js\";\nimport type { RawDraftContentState } from \"draft-js/lib/RawDraftContentState\";\nimport type { DraftDecoratorType } from \"draft-js/lib/DraftDecoratorType\";\n\nconst EMPTY_CONTENT_STATE = null;\n\n/**\n * Creates a new EditorState from a RawDraftContentState, or an empty editor state by\n * passing `null`. Optionally takes a decorator.\n */\nexport const createEditorStateFromRaw = (\n  rawContentState: ?RawDraftContentState,\n  decorator?: ?DraftDecoratorType,\n) => {\n  let editorState;\n\n  if (rawContentState) {\n    const contentState = convertFromRaw(rawContentState);\n    editorState = EditorState.createWithContent(contentState, decorator);\n  } else {\n    editorState = EditorState.createEmpty(decorator);\n  }\n\n  return editorState;\n};\n\n/**\n * Serialises the editorState using `convertToRaw`, but returns `null` if\n * the editor content is empty (no text, entities, styles).\n */\nexport const serialiseEditorStateToRaw = (editorState: EditorState) => {\n  const contentState = editorState.getCurrentContent();\n  const rawContentState = convertToRaw(contentState);\n\n  const isEmpty = rawContentState.blocks.every((block) => {\n    const isEmptyBlock =\n      block.text.trim().length === 0 &&\n      (!block.entityRanges || block.entityRanges.length === 0) &&\n      (!block.inlineStyleRanges || block.inlineStyleRanges.length === 0);\n    return isEmptyBlock;\n  });\n\n  return isEmpty ? EMPTY_CONTENT_STATE : rawContentState;\n};\n","// @flow\nimport getContentStateFragment from \"draft-js/lib/getContentStateFragment\";\nimport getDraftEditorSelection from \"draft-js/lib/getDraftEditorSelection\";\nimport editOnCopy from \"draft-js/lib/editOnCopy\";\nimport editOnCut from \"draft-js/lib/editOnCut\";\n\nimport {\n  EditorState,\n  Modifier,\n  convertToRaw,\n  convertFromRaw,\n  ContentState,\n} from \"draft-js\";\n\nimport type { ElementRef } from \"react\";\nimport type { Editor, EditorState as EditorStateType } from \"draft-js\";\n\n// Custom attribute to store Draft.js content in the HTML clipboard.\nconst FRAGMENT_ATTR = \"data-draftjs-conductor-fragment\";\n\nconst DRAFT_DECORATOR = '[data-contents=\"true\"] [contenteditable=\"false\"]';\n\n// Checks whether the selection is inside a decorator or not.\n// This is important to change the copy-cut behavior accordingly.\nconst isSelectionInDecorator = (selection: Selection) => {\n  const { anchorNode, focusNode } = selection;\n  if (!anchorNode || !focusNode) {\n    return false;\n  }\n\n  const anchor =\n    anchorNode instanceof Element ? anchorNode : anchorNode.parentElement;\n  const focus =\n    focusNode instanceof Element ? focusNode : focusNode.parentElement;\n\n  const anchorDecorator = anchor && anchor.closest(DRAFT_DECORATOR);\n  const focusDecorator = focus && focus.closest(DRAFT_DECORATOR);\n\n  return (\n    anchorDecorator &&\n    focusDecorator &&\n    (anchorDecorator.contains(focusDecorator) ||\n      focusDecorator.contains(anchorDecorator))\n  );\n};\n\n// Get clipboard content from the selection like Draft.js would.\nconst getSelectedContent = (\n  editorState: EditorStateType,\n  editorRoot: HTMLElement,\n) => {\n  const { selectionState } = getDraftEditorSelection(editorState, editorRoot);\n\n  const fragment = getContentStateFragment(\n    editorState.getCurrentContent(),\n    selectionState,\n  );\n\n  // If the selection contains no content (according to Draft.js), use the default browser behavior.\n  // This happens when selecting text that's within contenteditable=false blocks in Draft.js.\n  // See https://github.com/thibaudcolas/draftjs-conductor/issues/12.\n  const isEmpty = fragment.every((block) => {\n    return block.getText().length === 0;\n  });\n\n  return isEmpty ? null : fragment;\n};\n\n// Overrides the default copy/cut behavior, adding the serialised Draft.js content to the clipboard data.\n// See also https://github.com/basecamp/trix/blob/62145978f352b8d971cf009882ba06ca91a16292/src/trix/controllers/input_controller.coffee#L415-L422\n// We serialise the editor content within HTML, not as a separate mime type, because Draft.js only allows access\n// to HTML in its paste event handler.\nconst draftEditorCopyCutListener = (\n  ref: ElementRef<Editor>,\n  e: SyntheticClipboardEvent<>,\n) => {\n  const selection = window.getSelection();\n\n  // Completely skip event handling if clipboardData is not supported (IE11 is out).\n  // Also skip if there is no selection ranges.\n  // Or if the selection is fully within a decorator.\n  if (\n    !e.clipboardData ||\n    selection.rangeCount === 0 ||\n    isSelectionInDecorator(selection)\n  ) {\n    return;\n  }\n\n  const fragment = getSelectedContent(ref._latestEditorState, ref.editor);\n\n  // Override the default behavior if there is selected content.\n  if (fragment) {\n    const content = ContentState.createFromBlockArray(fragment.toArray());\n    const serialisedContent = JSON.stringify(convertToRaw(content));\n\n    // Create a temporary element to store the selection’s HTML.\n    // See also Rangy's implementation: https://github.com/timdown/rangy/blob/1e55169d2e4d1d9458c2a87119addf47a8265276/src/core/domrange.js#L515-L520.\n    const fragmentElt = document.createElement(\"div\");\n    // Modern browsers only support a single range.\n    fragmentElt.appendChild(selection.getRangeAt(0).cloneContents());\n    fragmentElt.setAttribute(FRAGMENT_ATTR, serialisedContent);\n    // We set the style property to replicate the browser's behavior of inline styles in rich text copy-paste.\n    // In Draft.js, this is important for line breaks to be interpreted correctly when pasted into another word processor.\n    // See https://github.com/facebook/draft-js/blob/a1f4593d8fa949954053e5d5840d33ce1d1082c6/src/component/base/DraftEditor.react.js#L328.\n    fragmentElt.setAttribute(\"style\", \"white-space: pre-wrap;\");\n\n    e.clipboardData.setData(\"text/plain\", selection.toString());\n    e.clipboardData.setData(\"text/html\", fragmentElt.outerHTML);\n\n    e.preventDefault();\n  }\n};\n\nexport const onDraftEditorCopy = (\n  editor: Editor,\n  e: SyntheticClipboardEvent<>,\n) => {\n  draftEditorCopyCutListener(editor, e);\n  editOnCopy(editor, e);\n};\n\nexport const onDraftEditorCut = (\n  editor: Editor,\n  e: SyntheticClipboardEvent<>,\n) => {\n  draftEditorCopyCutListener(editor, e);\n  editOnCut(editor, e);\n};\n\n/**\n * Registers custom copy/cut event listeners on an editor.\n */\nexport const registerCopySource = (ref: ElementRef<Editor>) => {\n  const editorElt = ref.editor;\n  const onCopyCut = draftEditorCopyCutListener.bind(null, ref);\n\n  editorElt.addEventListener(\"copy\", onCopyCut);\n  editorElt.addEventListener(\"cut\", onCopyCut);\n\n  return {\n    unregister() {\n      editorElt.removeEventListener(\"copy\", onCopyCut);\n      editorElt.removeEventListener(\"cut\", onCopyCut);\n    },\n  };\n};\n\n/**\n * Returns pasted content coming from Draft.js editors set up to serialise\n * their Draft.js content within the HTML.\n */\nexport const getDraftEditorPastedContent = (html: ?string) => {\n  // Plain-text pastes are better handled by Draft.js.\n  if (html === \"\" || typeof html === \"undefined\" || html === null) {\n    return null;\n  }\n\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\n  const fragmentElt = doc.querySelector(`[${FRAGMENT_ATTR}]`);\n\n  // Handle the paste if it comes from draftjs-conductor.\n  if (fragmentElt) {\n    const fragmentAttr = fragmentElt.getAttribute(FRAGMENT_ATTR);\n    let rawContent;\n\n    try {\n      // If JSON parsing fails, leave paste handling to Draft.js.\n      // There is no reason for this to happen, unless the clipboard was altered somehow.\n      // $FlowFixMe\n      rawContent = JSON.parse(fragmentAttr);\n    } catch (error) {\n      return null;\n    }\n\n    return convertFromRaw(rawContent);\n  }\n\n  return null;\n};\n\n/**\n * Handles pastes coming from Draft.js editors set up to serialise\n * their Draft.js content within the HTML.\n * This SHOULD NOT be used for stripPastedStyles editor.\n */\nexport const handleDraftEditorPastedText = (\n  html: ?string,\n  editorState: EditorStateType,\n) => {\n  const pastedContent = getDraftEditorPastedContent(html);\n\n  if (pastedContent) {\n    const fragment = pastedContent.getBlockMap();\n\n    const content = Modifier.replaceWithFragment(\n      editorState.getCurrentContent(),\n      editorState.getSelection(),\n      fragment,\n    );\n    return EditorState.push(editorState, content, \"insert-fragment\");\n  }\n\n  return false;\n};\n","// @flow\nimport React, { Component } from \"react\";\nimport type { Node } from \"react\";\n\ntype Props = {\n  children: Node,\n};\n\ntype State = {\n  error: ?Error,\n};\n\nclass SentryBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  componentDidCatch(error: Error, errorInfo: { componentStack: string }) {\n    const isRavenAvailable = !!window.Raven;\n    this.setState({ error });\n\n    if (isRavenAvailable) {\n      window.Raven.captureException(error, { extra: errorInfo });\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    const isRavenAvailable = !!window.Raven;\n\n    return error ? (\n      <div className=\"DraftEditor-root\">\n        <div className=\"DraftEditor-editorContainer\">\n          <div className=\"public-DraftEditor-content\">\n            {/* <img src={oops} /> */}\n            <div className=\"u-text-center\">\n              <p>Oops. The editor just crashed.</p>\n              <p>\n                Our team has been notified. You can provide us with more\n                information if you want to.\n              </p>\n              <div>\n                {isRavenAvailable ? (\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      window.Raven.lastEventId() &&\n                      window.Raven.showReportDialog()\n                    }\n                  >\n                    Submit a report\n                  </button>\n                ) : (\n                  <a\n                    href=\"https://github.com/thibaudcolas/draftjs-conductor/issues\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{\n                      textDecoration: \"underline\",\n                    }}\n                  >\n                    Open a GitHub issue\n                  </a>\n                )}\n                <span>&nbsp;</span>\n                <button\n                  type=\"button\"\n                  onClick={() => window.location.reload(false)}\n                >\n                  Reload the page\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ) : (\n      children\n    );\n  }\n}\n\nexport default SentryBoundary;\n","// @flow\nimport React from \"react\";\n\nconst onCopy = (value: string) => {\n  const hidden = document.createElement(\"textarea\");\n  hidden.value = value;\n\n  // $FlowFixMe\n  document.body.appendChild(hidden);\n  hidden.select();\n  document.execCommand(\"copy\");\n  // $FlowFixMe\n  document.body.removeChild(hidden);\n};\n\nconst Highlight = ({ value }: { value: string }) => (\n  <pre style={{ position: \"relative\" }}>\n    <button\n      onClick={onCopy.bind(null, value)}\n      style={{ position: \"absolute\", right: \"1rem\" }}\n    >\n      Copy\n    </button>\n    <code>{value}</code>\n  </pre>\n);\n\nexport default Highlight;\n","// @flow\nimport React from \"react\";\nimport type { Node } from \"react\";\nimport { ContentState } from \"draft-js\";\nimport type { ContentBlock } from \"draft-js\";\n\ntype Props = {\n  contentState: ContentState,\n  entityKey: string,\n  children: Node,\n};\n\nexport const linkStrategy = (\n  contentBlock: ContentBlock,\n  callback: (start: number, end: number) => void,\n  contentState: ContentState,\n) => {\n  contentBlock.findEntityRanges((character) => {\n    const entityKey = character.getEntity();\n    return (\n      entityKey !== null &&\n      contentState.getEntity(entityKey).getType() === \"LINK\"\n    );\n  }, callback);\n};\n\nconst Link = ({ contentState, entityKey, children }: Props) => {\n  const entity = contentState.getEntity(entityKey);\n  return (\n    <span className=\"link\" title={entity.getData().url}>\n      {children}\n    </span>\n  );\n};\n\nexport default Link;\n","// @flow\nimport React from \"react\";\nimport { ContentBlock, ContentState } from \"draft-js\";\n\nconst Image = ({\n  block,\n  contentState,\n}: {\n  block: ContentBlock,\n  contentState: ContentState,\n}) => {\n  const entityKey = block.getEntityAt(0);\n  const src = entityKey\n    ? contentState.getEntity(entityKey).getData().src\n    : \"/404\";\n\n  return (\n    <div>\n      <p>Image:</p>\n      <img src={src} alt=\"\" width=\"256\" />\n    </div>\n  );\n};\n\nexport default Image;\n","// @flow\nimport React from \"react\";\nimport { ContentBlock, ContentState } from \"draft-js\";\n\nimport \"./Snippet.css\";\n\nconst Snippet = ({\n  block,\n  contentState,\n}: {\n  block: ContentBlock,\n  contentState: ContentState,\n}) => {\n  const entityKey = block.getEntityAt(0);\n  const text = entityKey\n    ? contentState.getEntity(entityKey).getData().text\n    : \"Placeholder\";\n  return (\n    <div className=\"Snippet\" contentEditable={false}>\n      This is a snippet block:\n      <div className=\"Snippet__text\" contentEditable={false}>\n        {text}\n      </div>\n    </div>\n  );\n};\n\nexport default Snippet;\n","// @flow\nimport { EditorState, Modifier, RichUtils } from \"draft-js\";\n\nconst addLineBreak = (editorState: EditorState) => {\n  const content = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n\n  if (selection.isCollapsed()) {\n    return RichUtils.insertSoftNewline(editorState);\n  }\n\n  let newContent = Modifier.removeRange(content, selection, \"forward\");\n  const fragment = newContent.getSelectionAfter();\n  const block = newContent.getBlockForKey(fragment.getStartKey());\n  newContent = Modifier.insertText(\n    newContent,\n    fragment,\n    \"\\n\",\n    block.getInlineStyleAt(fragment.getStartOffset()),\n    null,\n  );\n  return EditorState.push(editorState, newContent, \"insert-fragment\");\n};\n\nconst DraftUtils = {\n  addLineBreak,\n};\n\nexport default DraftUtils;\n","// @flow\nimport React, { Component } from \"react\";\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  CompositeDecorator,\n  AtomicBlockUtils,\n  ContentBlock,\n  getDefaultKeyBinding,\n} from \"draft-js\";\nimport type { DraftBlockType } from \"draft-js/lib/DraftBlockType\";\nimport type { DraftEntityType } from \"draft-js/lib/DraftEntityType\";\n\nimport {\n  getListNestingStyles,\n  blockDepthStyleFn,\n  onDraftEditorCopy,\n  onDraftEditorCut,\n  handleDraftEditorPastedText,\n  createEditorStateFromRaw,\n  serialiseEditorStateToRaw,\n} from \"../../lib/index\";\n\nimport SentryBoundary from \"./SentryBoundary\";\nimport Highlight from \"./Highlight\";\nimport Link, { linkStrategy } from \"./Link\";\nimport Image from \"./Image\";\nimport Snippet from \"./Snippet\";\n\nimport DraftUtils from \"../utils/DraftUtils\";\n\nimport \"./DemoEditor.css\";\n\nconst BLOCKS = {\n  \"unstyled\": \"P\",\n  \"unordered-list-item\": \"UL\",\n  \"ordered-list-item\": \"OL\",\n  \"header-one\": \"H1\",\n  \"header-two\": \"H2\",\n  \"header-three\": \"H3\",\n  \"code-block\": \"{ }\",\n};\n\nconst BLOCKS_EXTENDED = {\n  \"unstyled\": \"P\",\n  \"unordered-list-item\": \"UL\",\n  \"ordered-list-item\": \"OL\",\n  \"header-one\": \"H1\",\n  \"header-two\": \"H2\",\n  \"header-three\": \"H3\",\n  \"header-four\": \"H4\",\n  \"header-five\": \"H5\",\n  \"header-six\": \"H6\",\n  \"blockquote\": \"❝\",\n  \"code-block\": \"{ }\",\n};\n\nconst STYLES = {\n  BOLD: \"B\",\n  ITALIC: \"I\",\n};\n\nconst STYLES_EXTENDED = {\n  BOLD: \"B\",\n  ITALIC: \"I\",\n  CODE: \"`\",\n  STRIKETHROUGH: \"~\",\n  UNDERLINE: \"_\",\n};\n\nconst ENTITIES = [\n  {\n    type: \"LINK\",\n    label: \"🔗\",\n    attributes: [\"url\"],\n    whitelist: {\n      href: \"^(http:|https:|undefined$)\",\n    },\n  },\n  {\n    type: \"IMAGE\",\n    label: \"📷\",\n    attributes: [\"src\"],\n    whitelist: {\n      src: \"^http\",\n    },\n  },\n  {\n    type: \"SNIPPET\",\n    label: \"🌱\",\n    attributes: [\"text\"],\n    whitelist: {},\n  },\n  {\n    type: \"HORIZONTAL_RULE\",\n    label: \"HR\",\n    attributes: [],\n    whitelist: {},\n  },\n];\n\nconst MAX_LIST_NESTING = 15;\n\nconst listNestingStyles = (\n  <style>{getListNestingStyles(MAX_LIST_NESTING)}</style>\n);\n\ntype Props = {\n  rawContentState: ?{},\n  extended: boolean,\n};\n\ntype State = {\n  editorState: EditorState,\n  readOnly: boolean,\n};\n\n/**\n * Demo editor.\n */\nclass DemoEditor extends Component<Props, State> {\n  static defaultProps = {\n    rawContentState: null,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    const { rawContentState } = props;\n\n    const decorator = new CompositeDecorator([\n      {\n        strategy: linkStrategy,\n        component: Link,\n      },\n    ]);\n\n    this.state = {\n      // $FlowFixMe Unclear why the decorator API disagrees with itself.\n      editorState: createEditorStateFromRaw(rawContentState, decorator),\n      readOnly: false,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.keyBindingFn = this.keyBindingFn.bind(this);\n    this.addBR = this.addBR.bind(this);\n    this.toggleReadOnly = this.toggleReadOnly.bind(this);\n    this.toggleStyle = this.toggleStyle.bind(this);\n    this.toggleBlock = this.toggleBlock.bind(this);\n    this.toggleEntity = this.toggleEntity.bind(this);\n    this.blockRenderer = this.blockRenderer.bind(this);\n    this.handlePastedText = this.handlePastedText.bind(this);\n  }\n\n  /* :: onChange: (nextState: EditorState) => void; */\n  onChange(nextState: EditorState) {\n    this.setState({ editorState: nextState });\n  }\n\n  /* :: toggleStyle: (type: string, e: Event) => void; */\n  toggleStyle(type: string, e: Event) {\n    const { editorState } = this.state;\n    this.onChange(RichUtils.toggleInlineStyle(editorState, type));\n\n    e.preventDefault();\n  }\n\n  /* :: toggleBlock: (type: string, e: Event) => void; */\n  toggleBlock(type: DraftBlockType, e: Event) {\n    const { editorState } = this.state;\n    this.onChange(RichUtils.toggleBlockType(editorState, type));\n\n    e.preventDefault();\n  }\n\n  /* :: toggleEntity: (type: DraftEntityType | \"HORIZONTAL_RULE\" | \"SNIPPET\") => void; */\n  toggleEntity(type: DraftEntityType | \"HORIZONTAL_RULE\" | \"SNIPPET\") {\n    const { editorState } = this.state;\n    let content = editorState.getCurrentContent();\n\n    if (type === \"IMAGE\") {\n      content = content.createEntity(type, \"IMMUTABLE\", {\n        src: \"https://thibaudcolas.github.io/draftjs-conductor/wysiwyg-magic-wand.png\",\n      });\n      const entityKey = content.getLastCreatedEntityKey();\n      this.onChange(\n        AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \"),\n      );\n    } else if (type === \"SNIPPET\") {\n      // $FlowFixMe\n      content = content.createEntity(type, \"IMMUTABLE\", {\n        text: \"Content of the snippet goes here\",\n      });\n      const entityKey = content.getLastCreatedEntityKey();\n      this.onChange(\n        AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \"),\n      );\n    } else if (type === \"HORIZONTAL_RULE\") {\n      // $FlowFixMe\n      content = content.createEntity(type, \"IMMUTABLE\", {});\n      const entityKey = content.getLastCreatedEntityKey();\n      this.onChange(\n        AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, \" \"),\n      );\n    } else {\n      content = content.createEntity(type, \"MUTABLE\", {\n        url: \"http://www.example.com/\",\n      });\n      const entityKey = content.getLastCreatedEntityKey();\n      const selection = editorState.getSelection();\n      this.onChange(RichUtils.toggleLink(editorState, selection, entityKey));\n    }\n  }\n\n  /* :: blockRenderer: (block: ContentBlock) => { component: typeof Component, editable: boolean }; */\n  blockRenderer(block: ContentBlock) {\n    const { editorState } = this.state;\n    const content = editorState.getCurrentContent();\n\n    if (block.getType() !== \"atomic\") {\n      return null;\n    }\n\n    const entityKey = block.getEntityAt(0);\n\n    if (!entityKey) {\n      return {\n        editable: false,\n      };\n    }\n\n    const entity = content.getEntity(entityKey);\n\n    if (entity.getType() === \"HORIZONTAL_RULE\") {\n      return {\n        component: () => <hr />,\n        editable: false,\n      };\n    }\n\n    if (entity.getType() === \"SNIPPET\") {\n      return {\n        component: Snippet,\n        editable: false,\n      };\n    }\n\n    return {\n      component: Image,\n      editable: false,\n    };\n  }\n\n  /* :: handlePastedText: (text: string, html: ?string, editorState: EditorState) => boolean; */\n  handlePastedText(text: string, html: ?string, editorState: EditorState) {\n    let newState = handleDraftEditorPastedText(html, editorState);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  /* :: keyBindingFn: (event: SyntheticKeyboardEvent<>) => void; */\n  keyBindingFn(event: SyntheticKeyboardEvent /*:: <> */) {\n    const TAB = 9;\n    switch (event.keyCode) {\n      case TAB: {\n        const { editorState } = this.state;\n        const newState = RichUtils.onTab(event, editorState, MAX_LIST_NESTING);\n        this.onChange(newState);\n        return null;\n      }\n      default: {\n        return getDefaultKeyBinding(event);\n      }\n    }\n  }\n\n  /* :: addBR: (e: Event) => void; */\n  addBR(e: Event) {\n    const { editorState } = this.state;\n    this.onChange(DraftUtils.addLineBreak(editorState));\n\n    e.preventDefault();\n  }\n\n  /* :: toggleReadOnly: (e: Event) => void; */\n  toggleReadOnly(e: Event) {\n    this.setState(({ readOnly }: State) => ({ readOnly: !readOnly }));\n\n    e.preventDefault();\n  }\n\n  render() {\n    const { extended } = this.props;\n    const { editorState, readOnly } = this.state;\n    const styles = extended ? STYLES_EXTENDED : STYLES;\n    const blocks = extended ? BLOCKS_EXTENDED : BLOCKS;\n\n    return (\n      <div className=\"DemoEditor\">\n        <SentryBoundary>\n          <div className=\"EditorToolbar\">\n            {Object.keys(styles).map((type) => (\n              <button\n                key={type}\n                onMouseDown={this.toggleStyle.bind(this, type)}\n              >\n                {STYLES_EXTENDED[type]}\n              </button>\n            ))}\n            {Object.keys(blocks).map((type) => (\n              <button\n                key={type}\n                onMouseDown={this.toggleBlock.bind(this, type)}\n              >\n                {BLOCKS_EXTENDED[type]}\n              </button>\n            ))}\n            {ENTITIES.map((type) => (\n              <button\n                key={type.type}\n                onMouseDown={this.toggleEntity.bind(this, type.type)}\n              >\n                {type.label}\n              </button>\n            ))}\n            <button onMouseDown={this.addBR}>BR</button>\n            <button onMouseDown={this.toggleReadOnly}>\n              {readOnly ? \"📕\" : \"📖\"}\n            </button>\n          </div>\n          <Editor\n            editorState={editorState}\n            readOnly={readOnly}\n            onChange={this.onChange}\n            stripPastedStyles={false}\n            blockRendererFn={this.blockRenderer}\n            blockStyleFn={blockDepthStyleFn}\n            keyBindingFn={this.keyBindingFn}\n            onCopy={onDraftEditorCopy}\n            onCut={onDraftEditorCut}\n            handlePastedText={this.handlePastedText}\n          />\n        </SentryBoundary>\n        {listNestingStyles}\n        <details>\n          <summary>\n            <span className=\"link\">Debug</span>\n          </summary>\n          <Highlight\n            value={JSON.stringify(\n              serialiseEditorStateToRaw(editorState),\n              null,\n              2,\n            )}\n          />\n        </details>\n      </div>\n    );\n  }\n}\n\nexport default DemoEditor;\n","// @flow\nimport React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport DemoEditor from \"../components/DemoEditor\";\n\nconst copyPasteContent = {\n  blocks: [\n    {\n      key: \"8qfte\",\n      text: \"Copy this content\",\n      type: \"header-two\",\n    },\n    {\n      key: \"6m80m\",\n      text: \" \",\n      type: \"atomic\",\n      entityRanges: [\n        {\n          offset: 0,\n          length: 1,\n          key: 0,\n        },\n      ],\n    },\n    {\n      key: \"c0ala\",\n      text: \"\",\n      type: \"unstyled\",\n    },\n    {\n      key: \"7knr3\",\n      text: \"From here\",\n      type: \"header-three\",\n    },\n    {\n      key: \"er6ke\",\n      text: \"To the editor below!\",\n      type: \"ordered-list-item\",\n    },\n    {\n      key: \"47a3o\",\n      text: \" \",\n      type: \"atomic\",\n      entityRanges: [\n        {\n          offset: 0,\n          length: 1,\n          key: 1,\n        },\n      ],\n    },\n    {\n      key: \"826u0\",\n      text: \"Numbered list\",\n      type: \"ordered-list-item\",\n    },\n  ],\n  entityMap: {\n    // prettier-ignore\n    '0': {\n      type: \"HORIZONTAL_RULE\",\n      mutability: \"IMMUTABLE\",\n      data: {},\n    },\n    // prettier-ignore\n    '1': {\n      type: \"SNIPPET\",\n      mutability: \"IMMUTABLE\",\n      data: {\n        text: \"Content of the snippet goes here\",\n      },\n    },\n  },\n};\n\nconst listNestingContent = {\n  blocks: [\n    {\n      key: \"ako0c\",\n      text: \"Infinite\",\n      type: \"ordered-list-item\",\n      depth: 0,\n    },\n    {\n      key: \"adreo\",\n      text: \"Nested\",\n      type: \"ordered-list-item\",\n      depth: 1,\n    },\n    {\n      key: \"bm3ec\",\n      text: \"List\",\n      type: \"ordered-list-item\",\n      depth: 2,\n    },\n    {\n      key: \"aqg1s\",\n      text: \"Nesting\",\n      type: \"ordered-list-item\",\n      depth: 3,\n    },\n    {\n      key: \"4dns4\",\n      text: \"Styles\",\n      type: \"ordered-list-item\",\n      depth: 4,\n    },\n    {\n      key: \"5k6tv\",\n      text: \"Work\",\n      type: \"ordered-list-item\",\n      depth: 5,\n    },\n    {\n      key: \"9htu8\",\n      text: \"For\",\n      type: \"ordered-list-item\",\n      depth: 6,\n    },\n    {\n      key: \"at7om\",\n      text: \"As\",\n      type: \"ordered-list-item\",\n      depth: 7,\n    },\n    {\n      key: \"8fddl\",\n      text: \"Many\",\n      type: \"ordered-list-item\",\n      depth: 8,\n    },\n    {\n      key: \"2ja3i\",\n      text: \"Levels\",\n      type: \"ordered-list-item\",\n      depth: 9,\n    },\n    {\n      key: \"cv49i\",\n      text: \"As\",\n      type: \"ordered-list-item\",\n      depth: 10,\n    },\n    {\n      key: \"4aoq9\",\n      text: \"Configured\",\n      type: \"ordered-list-item\",\n      depth: 11,\n    },\n    {\n      key: \"d4hhk\",\n      text: \"Here\",\n      type: \"ordered-list-item\",\n      depth: 12,\n    },\n    {\n      key: \"bbeuk\",\n      text: \"Up\",\n      type: \"ordered-list-item\",\n      depth: 13,\n    },\n    {\n      key: \"6s9a8\",\n      text: \"To\",\n      type: \"ordered-list-item\",\n      depth: 14,\n    },\n    {\n      key: \"48sq1\",\n      text: \"15!\",\n      type: \"ordered-list-item\",\n      depth: 15,\n    },\n  ],\n  entityMap: {},\n};\n\nclass App extends Component<{}> {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Idempotent copy-paste between editors</h2>\n        <p>\n          The default Draft.js copy-paste handlers lose a lot of the formatting\n          when copy-pasting between Draft.js editors. While this might be ok for\n          some use cases, sites with multiple editors on the same page need them\n          to reliably support copy-paste.\n        </p>\n        <DemoEditor extended={true} rawContentState={copyPasteContent} />\n        <DemoEditor extended={false} />\n        <h2>Infinite list nesting</h2>\n        <p>\n          By default, Draft.js only provides support for 5 list levels for\n          bulleted and numbered lists. While this is often more than enough,\n          some editors need to go further. This provides infinite list nesting\n          styles.\n        </p>\n        <DemoEditor extended={false} rawContentState={listNestingContent} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// @flow\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./demo/utils/elements.css\";\nimport \"./demo/utils/typography.css\";\nimport \"./demo/utils/layout.css\";\nimport \"./demo/utils/objects.css\";\n\nimport \"draft-js/dist/Draft.css\";\n\nimport \"./demo/components/header.css\";\nimport \"./demo/components/page-nav.css\";\n\nimport \"./demo/utils/utilities.css\";\n\nimport App from \"./demo/components/App\";\n\nconst mount = document.getElementById(\"root\");\n\nif (mount) {\n  ReactDOM.render(<App />, mount);\n}\n"],"sourceRoot":""}